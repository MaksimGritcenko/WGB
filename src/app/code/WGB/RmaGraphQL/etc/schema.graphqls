type Mutation {
    createReturnRequest(input: CreateReturnInput!): CreateReturnOutput
    @resolver(class: "WGB\\RmaGraphQL\\Model\\Resolver\\CreateNewRequest")
    addTrackingToRequest(input: AddTrackingInput!): AddTrackingOutput
    @resolver(class: "WGB\\RmaGraphQL\\Model\\Resolver\\AddTrackingToRequest")
    cancelReturnRequest(input: CancelRequestInput!): CancelRequestOutput
    @resolver(class: "WGB\\RmaGraphQL\\Model\\Resolver\\CancelRequest")
    sendRmaMessage(input: SendRmaMessageInput!): SendRmaMessageOutput
    @resolver(class: "WGB\\RmaGraphQL\\Model\\Resolver\\SendMessage")
    getRmaChatForRequest(request_id: String!): RmaChatForRequest
    @resolver(class: "WGB\\RmaGraphQL\\Model\\Resolver\\GetChatForRequest")
}

type Query {
    getRmaConfiguration : RmaConfiguration
    @resolver(class: "WGB\\RmaGraphQL\\Model\\Resolver\\Config")
    getReturnList: [ReturnListEntry]
    @resolver(class: "WGB\\RmaGraphQL\\Model\\Resolver\\ReturnsForUser")
    getReturnDetailsById(return_id: Int): ReturnDetails
    @resolver(class: "WGB\\RmaGraphQL\\Model\\Resolver\\ReturnDetails")
    getOrderById(id: Int!): Order
    @resolver(class: "WGB\\RmaGraphQL\\Model\\Resolver\\ReturnOrderResolver")
    getRmaPolicy : RmaPolicy
    @resolver(class: "WGB\\RmaGraphQL\\Model\\Resolver\\Policy")
    getShippingLabel(return_id: Int): ShippingLabelData
    @resolver(class: "WGB\\RmaGraphQL\\Model\\Resolver\\ShippingLabel")
}

type RmaChatForRequest {
    messages: [RmaChatMessage]
}

type RmaChatMessage {
    is_manager: Boolean
    is_system: Boolean
    message: String
    username: String
    created_at: String
    message_id: String
    files: [RmaFile]
}

type RmaFile {
    filename: String
    link: String
}

input SendRmaMessageInput {
    request_id: String!
    message_text: String!
    encoded_files: [EncodedFile]
}

input EncodedFile {
    name: String!
    encoded_file: String!
}

type SendRmaMessageOutput {
    success: Boolean
}

input CancelRequestInput {
    request_id: String
}

type CancelRequestOutput {
    success: Boolean
}

type RmaPolicy {
    policy_status: Boolean
    policy_page_url: String
}

input AddTrackingInput {
    request_id: String
    tracking_code: String
    tracking_number: String
}

type AddTrackingOutput {
    success: Boolean
}

type Order {
    base_order_info: BaseOrderInfo
    payment_info: PaymentInfo
    shipping_info: ShippingInfo
    order_products: [OrderProduct]
    @resolver(class: "WGB\\RmaGraphQL\\Model\\Resolver\\Product")
}

interface ProductInterface {
    qty: Int
    row_total: Float
    original_price: Float
    license_key: String
    return_resolutions: [ProductReturnResolution]
    @resolver(class: "WGB\\RmaGraphQL\\Model\\Resolver\\ReturnResolutionsForProduct")
}

type OrderProduct implements ProductInterface {
    quote_item_id: String
    qty_returning: Int @doc(description: "Returnability must be used to determine whether the item is returnable")
    returnability: Returnability
    chosen_attributes: [OrderProductChosenAttribute]
}

type OrderProductChosenAttribute {
    label: String
    value: String
}

type Returnability {
    is_returnable: Boolean
    no_returnable_reason_id: Int
    no_returnable_reason_label: String
    resolutions: [ReturnResolution]
}

type ProductReturnResolution {
    resolution: ReturnResolution
    value: Int
}

type BaseOrderInfo {
    id: Int
    total_qty_ordered: Int
    increment_id: String
    created_at: String
    status: String
    status_can_be_returned: Boolean
    @resolver(class: "WGB\\RmaGraphQL\\Model\\Resolver\\StatusCanBeReturned")
    status_label: String
    grand_total: Float
    sub_total: Float
}

type RmaConfiguration {
    carriers: [ReturnCarrier]
    reasons: [ReturnReason]
    conditions: [ReturnItemCondition]
    resolutions: [ReturnResolution]
    custom_fields: ReturnCustomFields
    contact_data: ReturnContactData
}

type ReturnContactData {
    email: String
    phone_number: String
}

input ReturnCustomFieldInput {
    code: String!
    value: String!
}

type ReturnCustomFields {
    fields: [ReturnCustomField]
    label: String
}

type ReturnCustomField {
    code: String
    label: String
}

type ReturnCarrier {
    code: String
    label: String
}

type ReturnDetails {
    id: String
    order_id: String
    created_at: String
    status: Int
    status_description: String
    state: String
    tracking: [ReturnTracking]
    items: [ReturnItemDetails]
    @resolver(class: "WGB\\RmaGraphQL\\Model\\Resolver\\ReturnItems")
}

type ShippingLabelData {
    file: String
}

type ReturnTracking {
    carrier: String,
    tracking_id: String,
    tracking_code: String,
    tracking_number: String
}

type ReturnItemDetails {
    name: String
    discount_amount: Float
    discount_percent: Float
    item_id: String
    price: Float
    product: OrderProduct
    qty: Float
    row_total: Float
    sku: String
    tax_amount: Float
    tax_percent: Float
    reason: ReturnReason
    condition: ReturnItemCondition
    resolution: ReturnResolution
    chosen_attributes: [OrderProductChosenAttribute]
    status: ReturnState
}

type ReturnState {
    state: Int!
    state_label: String!
}

type ReturnListEntry {
    order_id: String
    request_id: String
    created_at: String
    status: ReturnState
    request_qty: Float
}

input CreateReturnInput {
    order_id: String!
    custom_fields: [ReturnCustomFieldInput]
    items: [ReturnItemInput]!
}

type CreateReturnOutput {
    return_id: String
}

input ReturnItemInput {
    quote_item_id: Int!
    qty: Float!
    condition: Int!
    reason: Int!
    resolution: Int!
}

type ReturnReason {
    reason_id: Int
    title: String
    payer: Int @doc(description: "0 - Customer; 1 - Shop owner; 2 - Do not show")
    position: Int
    label: String
}

type ReturnItemCondition {
    condition_id: Int
    title: String
    position: Int
    label: String
}

type ReturnResolution {
    resolution_id: Int
    title: String
    position: Int
    label: String
}

type QuoteData {
    is_show_rma_info_cart: Boolean
        @resolver(class: "WGB\\RmaGraphQL\\Model\\Resolver\\ReturnRulesForCart")
}

type Products {
    is_show_rma_info_pdp: Boolean
        @resolver(class: "WGB\\RmaGraphQL\\Model\\Resolver\\ReturnRulesForPDP")
}
